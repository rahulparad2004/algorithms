Depth First Traversal for a graph is similar to Depth First Traversal of a tree. The only catch here is, that, unlike trees, 
graphs may contain cycles.To avoid processing a node more than once, 
use a boolean visited array. A graph can have more than one DFS traversal.

class Solution{
  private:
    void dfs(int node,vector<int> adj[],int vis[],vector<int> &ans){
        vis[node]=1;//those node are visited, the those is 1
        ans.push_back(node);
        for(auto i : adj[node]){
            if(! vis[i]){
                dfs(i,adj,vis,ans);
            }
        }
    }
  public:
    vector<int> dfsOfGraph(int V, vector<int> adj[]){
        int vis[V]={0};//for 0 indexing
        int start=0;
        vector<int> ans;
        dfs(start,adj,vis,ans);
        return ans;
    }
};
void addEdge(vector<int> adj[],int u,int v)
{
    adj[u].push_back(v);
    adj[v].push_back(u);
}
void printAns(vector<int> &ans){
    for(int i=0;i<ans.size();i++){
        cout<<i<<" ";
    }
}
int main()
{
    vector<int> adj[5];
    addEdge(adj, 0, 2);
    addEdge(adj, 2, 4);
    addEdge(adj, 0, 1);
    addEdge(adj, 0, 3);
    Solution obj;
    vector<int> printans=obj.dfsOfGraph(5,adj);
    printAns(printans);
}
